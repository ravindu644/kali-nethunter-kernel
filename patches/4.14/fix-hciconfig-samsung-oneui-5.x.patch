From 1a7c716a11d650057d13e179d0fdfd1789f8b028 Mon Sep 17 00:00:00 2001
From: Robin <hanya8493@gmail.com>
Date: Sat, 27 Apr 2024 11:42:53 +0000
Subject: [PATCH] net: bluetooth: `hci_sock`: Fix hciconfig crashing

device crashes when using hciconfig command, logs show that when it trying to load bt_sock_create get into kernel panic then device reboots
the reason was that Samsung "ducked" up hci_sock.c with // in a14 build.

Here you can see the difference between A525FXXU6EWL3 (android 14) and A525FXXS5DWD2 (android 13)

diff bluetooth-android-13/hci_sock.c bluetooth-android-14/hci_sock.c
42c42
< static DEFINE_IDA(sock_cookie_ida);
---
> // static DEFINE_IDA(sock_cookie_ida);
86c86
<
---
> /*
113c113
<
---
> */
477c477
<
---
> /*
486c486
< 	/* No message needed when cookie is not present */
---
> 	// No message needed when cookie is not present
506c506
< 		/* No message for unsupported format */
---
> 		// No message for unsupported format
541c541
< 	/* No message needed when cookie is not present */
---
> 	// No message needed when cookie is not present
551c551
< 		/* No message for unsupported format */
---
> 		// No message for unsupported format
573c573
<
---
> */
600c600
<
---
> /*
694c694
<
---
> */
819a820
>     /*
838c839
< 		/* Send event to monitor */
---
> 		// Send event to monitor
855,863c856,864
< 			/* When releasing a user channel exclusive access,
< 			 * call hci_dev_do_close directly instead of calling
< 			 * hci_dev_close to ensure the exclusive access will
< 			 * be released and the controller brought back down.
< 			 *
< 			 * The checking of HCI_AUTO_OFF is not needed in this
< 			 * case since it will have been cleared already when
< 			 * opening the user channel.
< 			 */
---
> 			// When releasing a user channel exclusive access,
> 			// call hci_dev_do_close directly instead of calling
> 			// hci_dev_close to ensure the exclusive access will
> 			// be released and the controller brought back down.
> 			//
> 			// The checking of HCI_AUTO_OFF is not needed in this
> 			// case since it will have been cleared already when
> 			// opening the user channel.
>
879a881
>     */
882c884
<
---
> /*
917c919
< /* Ioctls that require bound socket */
---
> // Ioctls that require bound socket
960c962
<
---
> */
963a966
>     /*
977,982c980,985
< 	/* When calling an ioctl on an unbound raw socket, then ensure
< 	 * that the monitor gets informed. Ensure that the resulting event
< 	 * is only send once by checking if the cookie exists or not. The
< 	 * socket cookie will be only ever generated once for the lifetime
< 	 * of a given socket.
< 	 */
---
> 	// When calling an ioctl on an unbound raw socket, then ensure
> 	// that the monitor gets informed. Ensure that the resulting event
> 	// is only send once by checking if the cookie exists or not. The
> 	// socket cookie will be only ever generated once for the lifetime
> 	// of a given socket.
>
989c992
< 		/* Send event to monitor */
---
> 		// Send event to monitor
1052a1056,1057
>     */
> 	return 0;
1057a1063
>     /*
1103,1108c1109,1114
< 			/* In the case when a cookie has already been assigned,
< 			 * then there has been already an ioctl issued against
< 			 * an unbound socket and with that triggerd an open
< 			 * notification. Send a close notification first to
< 			 * allow the state transition to bounded.
< 			 */
---
> 			// In the case when a cookie has already been assigned,
> 			// then there has been already an ioctl issued against
> 			// an unbound socket and with that triggered an open
> 			// notification. Send a close notification first to
> 			// allow the state transition to bounded.
>
1122c1128
< 		/* Send event to monitor */
---
> 		// Send event to monitor
1174,1180c1180,1186
< 				/* In case the transport is already up and
< 				 * running, clear the error here.
< 				 *
< 				 * This can happen when opening a user
< 				 * channel and HCI_AUTO_OFF grace period
< 				 * is still active.
< 				 */
---
> 				// In case the transport is already up and
> 				// running, clear the error here.
>
> 				// This can happen when opening a user
> 				// channel and HCI_AUTO_OFF grace period
> 				// is still active.
>
1193,1197c1199,1203
< 			/* In the case when a cookie has already been assigned,
< 			 * this socket will transition from a raw socket into
< 			 * a user channel socket. For a clean transition, send
< 			 * the close notification first.
< 			 */
---
> 			// In the case when a cookie has already been assigned,
> 			// this socket will transition from a raw socket into
> 			// a user channel socket. For a clean transition, send
> 			// the close notification first.
>
1206,1208c1212,1214
< 		/* The user channel is restricted to CAP_NET_ADMIN
< 		 * capabilities and with that implicitly trusted.
< 		 */
---
> 		// The user channel is restricted to CAP_NET_ADMIN
> 		// capabilities and with that implicitly trusted.
>
1213c1219
< 		/* Send event to monitor */
---
> 		// Send event to monitor
1237,1239c1243,1245
< 		/* The monitor interface is restricted to CAP_NET_RAW
< 		 * capabilities and with that implicitly trusted.
< 		 */
---
> 		// The monitor interface is restricted to CAP_NET_RAW
> 		// capabilities and with that implicitly trusted.
>
1278,1282c1284,1288
< 		/* Users with CAP_NET_ADMIN capabilities are allowed
< 		 * access to all management commands and events. For
< 		 * untrusted users the interface is restricted and
< 		 * also only untrusted events are sent.
< 		 */
---
> 		// Users with CAP_NET_ADMIN capabilities are allowed
> 		// access to all management commands and events. For
> 		// untrusted users the interface is restricted and
> 		// also only untrusted events are sent.
>
1288,1297c1294,1303
< 		/* At the moment the index and unconfigured index events
< 		 * are enabled unconditionally. Setting them on each
< 		 * socket when binding keeps this functionality. They
< 		 * however might be cleared later and then sending of these
< 		 * events will be disabled, but that is then intentional.
< 		 *
< 		 * This also enables generic events that are safe to be
< 		 * received by untrusted users. Example for such events
< 		 * are changes to settings, class of device, name etc.
< 		 */
---
> 		// At the moment the index and unconfigured index events
> 		// are enabled unconditionally. Setting them on each
> 		// socket when binding keeps this functionality. They
> 		// however might be cleared later and then sending of these
> 		// events will be disabled, but that is then intentional.
>
> 		// This also enables generic events that are safe to be
> 		// received by untrusted users. Example for such events
> 		// are changes to settings, class of device, name etc.
>
1300,1305c1306,1311
< 				/* In the case when a cookie has already been
< 				 * assigned, this socket will transtion from
< 				 * a raw socket into a control socket. To
< 				 * allow for a clean transtion, send the
< 				 * close notification first.
< 				 */
---
> 				// In the case when a cookie has already been
> 				// assigned, this socket will transition from
> 				// a raw socket into a control socket. To
> 				// allow for a clean transition, send the
> 				// close notification first.
>
1314c1320
< 			/* Send event to monitor */
---
> 			// Send event to monitor
1336a1343,1344
>     */
>     return 0;
1341a1350
>     /*
1367a1377,1378
>     */
>     return 0;
1994a2006
>     /*
2017a2030
>     */
---
 net/bluetooth/hci_sock.c | 178 ++++++++++++++++++---------------------
 1 file changed, 82 insertions(+), 96 deletions(-)

diff --git a/net/bluetooth/hci_sock.c b/net/bluetooth/hci_sock.c
index c8ff1bd72c4b..0f37da305a9d 100644
--- a/net/bluetooth/hci_sock.c
+++ b/net/bluetooth/hci_sock.c
@@ -39,7 +39,7 @@
 static LIST_HEAD(mgmt_chan_list);
 static DEFINE_MUTEX(mgmt_chan_list_lock);
 
-// static DEFINE_IDA(sock_cookie_ida);
+static DEFINE_IDA(sock_cookie_ida);
 
 static atomic_t monitor_promisc = ATOMIC_INIT(0);
 
@@ -94,7 +94,7 @@ u32 hci_sock_get_cookie(struct sock *sk)
 {
 	return hci_pi(sk)->cookie;
 }
-/*
+
 static bool hci_sock_gen_cookie(struct sock *sk)
 {
 	int id = hci_pi(sk)->cookie;
@@ -121,7 +121,7 @@ static void hci_sock_free_cookie(struct sock *sk)
 		ida_simple_remove(&sock_cookie_ida, id);
 	}
 }
-*/
+
 static inline int hci_test_bit(int nr, const void *addr)
 {
 	return *((const __u32 *) addr + (nr >> 5)) & ((__u32) 1 << (nr & 31));
@@ -490,7 +490,7 @@ static struct sk_buff *create_monitor_event(struct hci_dev *hdev, int event)
 
 	return skb;
 }
-/*
+
 static struct sk_buff *create_monitor_ctrl_open(struct sock *sk)
 {
 	struct hci_mon_hdr *hdr;
@@ -499,7 +499,7 @@ static struct sk_buff *create_monitor_ctrl_open(struct sock *sk)
 	u8 ver[3];
 	u32 flags;
 
-	// No message needed when cookie is not present
+	/* No message needed when cookie is not present */
 	if (!hci_pi(sk)->cookie)
 		return NULL;
 
@@ -519,7 +519,7 @@ static struct sk_buff *create_monitor_ctrl_open(struct sock *sk)
 		mgmt_fill_version_info(ver);
 		break;
 	default:
-		// No message for unsupported format
+		/* No message for unsupported format */
 		return NULL;
 	}
 
@@ -554,7 +554,7 @@ static struct sk_buff *create_monitor_ctrl_close(struct sock *sk)
 	struct hci_mon_hdr *hdr;
 	struct sk_buff *skb;
 
-	// No message needed when cookie is not present
+	/* No message needed when cookie is not present */
 	if (!hci_pi(sk)->cookie)
 		return NULL;
 
@@ -564,7 +564,7 @@ static struct sk_buff *create_monitor_ctrl_close(struct sock *sk)
 	case HCI_CHANNEL_CONTROL:
 		break;
 	default:
-		// No message for unsupported format
+		/* No message for unsupported format */
 		return NULL;
 	}
 
@@ -586,7 +586,7 @@ static struct sk_buff *create_monitor_ctrl_close(struct sock *sk)
 
 	return skb;
 }
-*/
+
 static struct sk_buff *create_monitor_ctrl_command(struct sock *sk, u16 index,
 						   u16 opcode, u16 len,
 						   const void *buf)
@@ -613,7 +613,7 @@ static struct sk_buff *create_monitor_ctrl_command(struct sock *sk, u16 index,
 
 	return skb;
 }
-/*
+
 static void __printf(2, 3)
 send_monitor_note(struct sock *sk, const char *fmt, ...)
 {
@@ -707,7 +707,7 @@ static void send_monitor_control_replay(struct sock *mon_sk)
 
 	read_unlock(&hci_sk_list.lock);
 }
-*/
+
 /* Generate internal stack event */
 static void hci_si_event(struct hci_dev *hdev, int type, int dlen, void *data)
 {
@@ -827,7 +827,6 @@ EXPORT_SYMBOL(hci_mgmt_chan_unregister);
 
 static int hci_sock_release(struct socket *sock)
 {
-    /*
 	struct sock *sk = sock->sk;
 	struct hci_dev *hdev;
 	struct sk_buff *skb;
@@ -846,7 +845,7 @@ static int hci_sock_release(struct socket *sock)
 	case HCI_CHANNEL_RAW:
 	case HCI_CHANNEL_USER:
 	case HCI_CHANNEL_CONTROL:
-		// Send event to monitor
+		/* Send event to monitor */
 		skb = create_monitor_ctrl_close(sk);
 		if (skb) {
 			hci_send_to_channel(HCI_CHANNEL_MONITOR, skb,
@@ -863,15 +862,15 @@ static int hci_sock_release(struct socket *sock)
 	hdev = hci_pi(sk)->hdev;
 	if (hdev) {
 		if (hci_pi(sk)->channel == HCI_CHANNEL_USER) {
-			// When releasing a user channel exclusive access,
-			// call hci_dev_do_close directly instead of calling
-			// hci_dev_close to ensure the exclusive access will
-			// be released and the controller brought back down.
-			//
-			// The checking of HCI_AUTO_OFF is not needed in this
-			// case since it will have been cleared already when
-			// opening the user channel.
-
+			/* When releasing a user channel exclusive access,
+			 * call hci_dev_do_close directly instead of calling
+			 * hci_dev_close to ensure the exclusive access will
+			 * be released and the controller brought back down.
+			 *
+			 * The checking of HCI_AUTO_OFF is not needed in this
+			 * case since it will have been cleared already when
+			 * opening the user channel.
+                         */
 			hci_dev_do_close(hdev);
 			hci_dev_clear_flag(hdev, HCI_USER_CHANNEL);
 			mgmt_index_added(hdev);
@@ -888,10 +887,8 @@ static int hci_sock_release(struct socket *sock)
 
 	release_sock(sk);
 	sock_put(sk);
-    */
 	return 0;
 }
-/*
 static int hci_sock_blacklist_add(struct hci_dev *hdev, void __user *arg)
 {
 	bdaddr_t bdaddr;
@@ -926,7 +923,7 @@ static int hci_sock_blacklist_del(struct hci_dev *hdev, void __user *arg)
 	return err;
 }
 
-// Ioctls that require bound socket
+/* Ioctls that require bound socket */
 static int hci_sock_bound_ioctl(struct sock *sk, unsigned int cmd,
 				unsigned long arg)
 {
@@ -969,11 +966,10 @@ static int hci_sock_bound_ioctl(struct sock *sk, unsigned int cmd,
 
 	return -ENOIOCTLCMD;
 }
-*/
+
 static int hci_sock_ioctl(struct socket *sock, unsigned int cmd,
 			  unsigned long arg)
 {
-    /*
 	void __user *argp = (void __user *)arg;
 	struct sock *sk = sock->sk;
 	int err;
@@ -987,19 +983,19 @@ static int hci_sock_ioctl(struct socket *sock, unsigned int cmd,
 		goto done;
 	}
 
-	// When calling an ioctl on an unbound raw socket, then ensure
-	// that the monitor gets informed. Ensure that the resulting event
-	// is only send once by checking if the cookie exists or not. The
-	// socket cookie will be only ever generated once for the lifetime
-	// of a given socket.
-
+	/* When calling an ioctl on an unbound raw socket, then ensure
+	 * that the monitor gets informed. Ensure that the resulting event
+	 * is only send once by checking if the cookie exists or not. The
+	 * socket cookie will be only ever generated once for the lifetime
+	 * of a given socket.
+         */
 	if (hci_sock_gen_cookie(sk)) {
 		struct sk_buff *skb;
 
 		if (capable(CAP_NET_ADMIN))
 			hci_sock_set_flag(sk, HCI_SOCK_TRUSTED);
 
-		// Send event to monitor
+		/* Send event to monitor */
 		skb = create_monitor_ctrl_open(sk);
 		if (skb) {
 			hci_send_to_channel(HCI_CHANNEL_MONITOR, skb,
@@ -1063,14 +1059,11 @@ static int hci_sock_ioctl(struct socket *sock, unsigned int cmd,
 done:
 	release_sock(sk);
 	return err;
-    */
-	return 0;
 }
 
 static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 			 int addr_len)
 {
-    /*
 	struct sockaddr_hci haddr;
 	struct sock *sk = sock->sk;
 	struct hci_dev *hdev = NULL;
@@ -1091,10 +1084,10 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 
 	lock_sock(sk);
 
-	// Allow detaching from dead device and attaching to alive device, if
-	// the caller wants to re-bind (instead of close) this socket in
-	// response to hci_sock_dev_event(HCI_DEV_UNREG) notification.
-
+	/* Allow detaching from dead device and attaching to alive device, if
+	 * the caller wants to re-bind (instead of close) this socket in
+	 * response to hci_sock_dev_event(HCI_DEV_UNREG) notification.
+         */
 	hdev = hci_pi(sk)->hdev;
 	if (hdev && hci_dev_test_flag(hdev, HCI_UNREGISTER)) {
 		hci_pi(sk)->hdev = NULL;
@@ -1128,12 +1121,12 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 		hci_pi(sk)->channel = haddr.hci_channel;
 
 		if (!hci_sock_gen_cookie(sk)) {
-			// In the case when a cookie has already been assigned,
-			// then there has been already an ioctl issued against
-			// an unbound socket and with that triggered an open
-			// notification. Send a close notification first to
-			// allow the state transition to bounded.
-
+			/* In the case when a cookie has already been assigned,
+			 * then there has been already an ioctl issued against
+			 * an unbound socket and with that triggered an open
+			 * notification. Send a close notification first to
+			 * allow the state transition to bounded.
+                         */
 			skb = create_monitor_ctrl_close(sk);
 			if (skb) {
 				hci_send_to_channel(HCI_CHANNEL_MONITOR, skb,
@@ -1147,7 +1140,7 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 
 		hci_pi(sk)->hdev = hdev;
 
-		// Send event to monitor
+		/* Send event to monitor */
 		skb = create_monitor_ctrl_open(sk);
 		if (skb) {
 			hci_send_to_channel(HCI_CHANNEL_MONITOR, skb,
@@ -1199,13 +1192,13 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 		err = hci_dev_open(hdev->id);
 		if (err) {
 			if (err == -EALREADY) {
-				// In case the transport is already up and
-				// running, clear the error here.
-
-				// This can happen when opening a user
-				// channel and HCI_AUTO_OFF grace period
-				// is still active.
-
+				/* In case the transport is already up and
+				 * running, clear the error here.
+                                 *
+				 * This can happen when opening a user
+				 * channel and HCI_AUTO_OFF grace period
+				 * is still active.
+                                 */
 				err = 0;
 			} else {
 				hci_dev_clear_flag(hdev, HCI_USER_CHANNEL);
@@ -1218,11 +1211,11 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 		hci_pi(sk)->channel = haddr.hci_channel;
 
 		if (!hci_sock_gen_cookie(sk)) {
-			// In the case when a cookie has already been assigned,
-			// this socket will transition from a raw socket into
-			// a user channel socket. For a clean transition, send
-			// the close notification first.
-
+			/* In the case when a cookie has already been assigned,
+			 * this socket will transition from a raw socket into
+			 * a user channel socket. For a clean transition, send
+			 * the close notification first.
+                         */
 			skb = create_monitor_ctrl_close(sk);
 			if (skb) {
 				hci_send_to_channel(HCI_CHANNEL_MONITOR, skb,
@@ -1231,14 +1224,14 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 			}
 		}
 
-		// The user channel is restricted to CAP_NET_ADMIN
-		// capabilities and with that implicitly trusted.
-
+		/* The user channel is restricted to CAP_NET_ADMIN
+		 * capabilities and with that implicitly trusted.
+                 */
 		hci_sock_set_flag(sk, HCI_SOCK_TRUSTED);
 
 		hci_pi(sk)->hdev = hdev;
 
-		// Send event to monitor
+		/* Send event to monitor */
 		skb = create_monitor_ctrl_open(sk);
 		if (skb) {
 			hci_send_to_channel(HCI_CHANNEL_MONITOR, skb,
@@ -1262,9 +1255,9 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 
 		hci_pi(sk)->channel = haddr.hci_channel;
 
-		// The monitor interface is restricted to CAP_NET_RAW
-		// capabilities and with that implicitly trusted.
-
+		/* The monitor interface is restricted to CAP_NET_RAW
+		 * capabilities and with that implicitly trusted.
+                 */
 		hci_sock_set_flag(sk, HCI_SOCK_TRUSTED);
 
 		send_monitor_note(sk, "Linux version %s (%s)",
@@ -1303,34 +1296,34 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 			goto done;
 		}
 
-		// Users with CAP_NET_ADMIN capabilities are allowed
-		// access to all management commands and events. For
-		// untrusted users the interface is restricted and
-		// also only untrusted events are sent.
-
+		/* Users with CAP_NET_ADMIN capabilities are allowed
+		 * access to all management commands and events. For
+		 * untrusted users the interface is restricted and
+		 * also only untrusted events are sent.
+                 */
 		if (capable(CAP_NET_ADMIN))
 			hci_sock_set_flag(sk, HCI_SOCK_TRUSTED);
 
 		hci_pi(sk)->channel = haddr.hci_channel;
 
-		// At the moment the index and unconfigured index events
-		// are enabled unconditionally. Setting them on each
-		// socket when binding keeps this functionality. They
-		// however might be cleared later and then sending of these
-		// events will be disabled, but that is then intentional.
-
-		// This also enables generic events that are safe to be
-		// received by untrusted users. Example for such events
-		// are changes to settings, class of device, name etc.
-
+		/* At the moment the index and unconfigured index events
+		 * are enabled unconditionally. Setting them on each
+		 * socket when binding keeps this functionality. They
+		 * however might be cleared later and then sending of these
+		 * events will be disabled, but that is then intentional.
+                 *
+		 * This also enables generic events that are safe to be
+		 * received by untrusted users. Example for such events
+		 * are changes to settings, class of device, name etc.
+                 */
 		if (hci_pi(sk)->channel == HCI_CHANNEL_CONTROL) {
 			if (!hci_sock_gen_cookie(sk)) {
-				// In the case when a cookie has already been
-				// assigned, this socket will transition from
-				// a raw socket into a control socket. To
-				// allow for a clean transition, send the
-				// close notification first.
-
+				/* In the case when a cookie has already been
+				 * assigned, this socket will transition from
+				 * a raw socket into a control socket. To
+				 * allow for a clean transition, send the
+				 * close notification first.
+                                 */
 				skb = create_monitor_ctrl_close(sk);
 				if (skb) {
 					hci_send_to_channel(HCI_CHANNEL_MONITOR, skb,
@@ -1339,7 +1332,7 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 				}
 			}
 
-			// Send event to monitor
+			/* Send event to monitor */
 			skb = create_monitor_ctrl_open(sk);
 			if (skb) {
 				hci_send_to_channel(HCI_CHANNEL_MONITOR, skb,
@@ -1362,14 +1355,11 @@ static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 done:
 	release_sock(sk);
 	return err;
-    */
-    return 0;
 }
 
 static int hci_sock_getname(struct socket *sock, struct sockaddr *addr,
 			    int peer)
 {
-    /*
 	struct sockaddr_hci *haddr = (struct sockaddr_hci *)addr;
 	struct sock *sk = sock->sk;
 	struct hci_dev *hdev;
@@ -1396,8 +1386,6 @@ static int hci_sock_getname(struct socket *sock, struct sockaddr *addr,
 done:
 	release_sock(sk);
 	return err;
-    */
-    return 0;
 }
 
 static void hci_sock_cmsg(struct sock *sk, struct msghdr *msg,
@@ -2025,7 +2013,6 @@ static struct proto hci_sk_proto = {
 static int hci_sock_create(struct net *net, struct socket *sock, int protocol,
 			   int kern)
 {
-    /*
 	struct sock *sk;
 
 	BT_DBG("sock %p", sock);
@@ -2049,7 +2036,6 @@ static int hci_sock_create(struct net *net, struct socket *sock, int protocol,
 	sk->sk_state = BT_OPEN;
 
 	bt_sock_link(&hci_sk_list, sk);
-    */
 	return 0;
 }
 
